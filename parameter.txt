# for model.py
256     #rnn_size type=int, default=256, help='size of RNN hidden state')
2       #num_layers', type=int, default=2  help='number of layers in the RNN')
50      # batch_size', type=int, default=50, help='minibatch size')
300     #seq_length', type=int, default=300, help='RNN sequence length')
20      #num_epochs', type=int, default=30, help='number of epochs')
500     #save_every', type=int, default=500, help='save frequency')
save6    #model_dir', type=str, default='save', help='directory to save model to')
10.0    #grad_clip', type=float, default=10., help='clip gradients at this value')
0.003  #learning_rate', type=float, default=0.005, help='learning rate')
0.95    #decay_rate', type=float, default=0.95, help='decay rate for rmsprop')
20      #num_mixture', type=int, default=20, help='number of gaussian mixtures')
20      #data_scale', type=float, default=20, help='factor to scale raw data down by')
0.8     #keep_prob', type=float, default=0.8, help='dropout keep probability')

# for sample.py
svg/sample6  #'--filename', type=str, default='sample', help='filename of .svg file to output, without .svg')
800     #'--sample_length', type=int, default=800, help='number of strokes to sample')
10      #'--scale_factor', type=int, default=10, help='factor to scale down by for svg output.  smaller means bigger output')
save6    #'--model_dir', type=str, default='save', help='directory to save model to')
False    #'--freeze_graph', dest='freeze_graph', action='store_true', help='if true, freeze (replace variables with consts), prune (for inference) and save graph')
